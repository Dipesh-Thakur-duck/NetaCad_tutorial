
Python Operators - Full Notes with Examples
===========================================

1. Arithmetic Operators
-----------------------
Used for basic math operations.

| Operator | Description        | Example           | Output |
|----------|--------------------|-------------------|--------|
| +        | Addition            | 3 + 2             | 5      |
| -        | Subtraction         | 5 - 1             | 4      |
| *        | Multiplication      | 4 * 2             | 8      |
| /        | Division            | 10 / 2            | 5.0    |
| //       | Floor Division      | 10 // 3           | 3      |
| %        | Modulus             | 10 % 3            | 1      |
| **       | Exponentiation      | 2 ** 3            | 8      |

2. Assignment Operators
-----------------------
Used to assign and modify variables.

| Operator | Description              | Example      | Final Value of a |
|----------|--------------------------|--------------|------------------|
| =        | Assign                    | a = 5        | 5                |
| +=       | Add and assign            | a += 2       | 7                |
| -=       | Subtract and assign       | a -= 1       | 6                |
| *=       | Multiply and assign       | a *= 3       | 18               |
| /=       | Divide and assign         | a /= 2       | 9.0              |
| //=      | Floor divide and assign   | a //= 2      | 4.0              |
| %=       | Modulus and assign        | a %= 3       | 1.0              |
| **=      | Exponentiate and assign   | a **= 2      | 1.0              |

3. Comparison Operators
-----------------------
Used to compare values.

| Operator | Description         | Example      | Output |
|----------|---------------------|--------------|--------|
| ==       | Equal to            | 3 == 3       | True   |
| !=       | Not equal to        | 3 != 2       | True   |
| >        | Greater than        | 5 > 2        | True   |
| <        | Less than           | 1 < 3        | True   |
| >=       | Greater or equal to | 3 >= 3       | True   |
| <=       | Less or equal to    | 2 <= 1       | False  |

4. Logical Operators
--------------------
Used to combine boolean expressions.

| Operator | Description       | Example                | Output |
|----------|-------------------|------------------------|--------|
| and      | True if both are   | True and False         | False  |
| or       | True if at least one| False or True         | True   |
| not      | Negation           | not True               | False  |

5. Bitwise Operators
--------------------
Operate on binary numbers.

| Operator | Description   | Example   | Binary Form         | Output |
|----------|---------------|-----------|---------------------|--------|
| &        | AND            | 5 & 3     | 101 & 011 = 001     | 1      |
| |        | OR             | 5 | 3     | 101 | 011 = 111     | 7      |
| ^        | XOR            | 5 ^ 3     | 101 ^ 011 = 110     | 6      |
| ~        | NOT            | ~5        | ~00000101 = 11111010| -6     |
| <<       | Left Shift     | 2 << 1    | 10 << 1 = 100       | 4      |
| >>       | Right Shift    | 4 >> 1    | 100 >> 1 = 10       | 2      |

6. Identity Operators
---------------------
Compare memory locations.

| Operator | Description             | Example           | Output |
|----------|-------------------------|-------------------|--------|
| is       | Same object              | x is y            | True   |
| is not   | Not same object          | x is not y        | False  |

Example:
a = [1, 2]
b = a
c = [1, 2]
a is b   # True
a is c   # False

7. Membership Operators
------------------------
Test presence in a sequence.

| Operator | Description            | Example           | Output |
|----------|------------------------|-------------------|--------|
| in       | Present in sequence    | 'a' in 'cat'      | True   |
| not in   | Not present in sequence| 5 not in [1, 2, 3]| True   |

8. Ternary Operator
--------------------
Inline if-else.

Syntax:
value_if_true if condition else value_if_false

Example:
x = 5
result = "Even" if x % 2 == 0 else "Odd"
print(result)  # Output: Odd

9. Walrus Operator (:=)
------------------------
Assign and return in one expression (Python 3.8+)

Example:
if (n := len("hello")) > 3:
    print(n)  # Output: 5

